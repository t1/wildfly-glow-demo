"Indicates a Bean Validation constraint"
directive @constraint(format: String, max: BigInteger, maxFloat: BigDecimal, maxLength: Int, min: BigInteger, minFloat: BigDecimal, minLength: Int, pattern: String) repeatable on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"""
Indicates that an object or interface definition is an extension of another definition of that same type.
If your subgraph library supports GraphQL's built-in extend keyword, do not use this directive! Instead, use extend.
"""
directive @extends on OBJECT | INTERFACE

"""
Indicates that this subgraph usually can't resolve a particular object field, but it still needs to define that field for other purposes.
This directive is always used in combination with another directive that references object fields, such as @provides or @requires.
"""
directive @external on OBJECT | FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Designates an object type as an entity and specifies its key fields (a set of fields that the subgraph can use to uniquely identify any instance of the entity). You can apply multiple @key directives to a single entity (to specify multiple valid sets of key fields)."
directive @key(fields: String!) repeatable on OBJECT | INTERFACE

"""
Specifies a set of entity fields that a subgraph can resolve, but only at a particular schema path (at other paths, the subgraph can't resolve those fields).
If a subgraph can always resolve a particular entity field, do not apply this directive.
Using this directive is always an optional optimization. It can reduce the total number of subgraphs that your graph router needs to communicate with to resolve certain operations, which can improve performance.
"""
directive @provides(fields: String!) on FIELD_DEFINITION

"Indicates that the resolver for a particular entity field depends on the values of other entity fields that are resolved by other subgraphs. This tells the graph router that it needs to fetch the values of those externally defined fields first, even if the original client query didn't request them."
directive @requires(fields: String!) on FIELD_DEFINITION

"Used to specify the role required to execute a given field or operation."
directive @rolesAllowed(value: String) on FIELD_DEFINITION

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

union _Entity = Product

type Product @key(fields : "id") {
  id: Int!
  name: String
}

"Query root"
type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  product(id: Int!): Product
  products: [Product]
}

type _Service {
  sdl: String!
}

"Scalar for BigDecimal"
scalar BigDecimal

"Scalar for BigInteger"
scalar BigInteger

scalar _Any
